function 글자_병합기(원자들) {
    const 초성 = 원자들[0] || '';
    const 중성 = 원자들[1] || '';
    const 종성 = 원자들[2] || '';

    if (!중성) {
        return 초성;
    }

    const 중성_유니코드 = 중성.charCodeAt(0);

    /*
    const 초성_연결자 = [
        'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ',
        'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ',
        'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'
    ].reduce((acc, cur, idx) => ({
        ...acc,
        [cur]: idx
    }), {});
    */

    const 초성_연결자 = {
        'ㄱ': 0,  'ㄲ': 1,  'ㄴ': 2,  'ㄷ': 3,
        'ㄸ': 4,  'ㄹ': 5,  'ㅁ': 6,  'ㅂ': 7,
        'ㅃ': 8,  'ㅅ': 9,  'ㅆ': 10, 'ㅇ': 11,
        'ㅈ': 12, 'ㅉ': 13, 'ㅊ': 14, 'ㅋ': 15,
        'ㅌ': 16, 'ㅍ': 17, 'ㅎ': 18,
    };

    /*
    const 종성_연결자 = [
        '', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ',
        'ㄷ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ',
        'ㄿ', 'ㅀ', 'ㅁ', 'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ',
        'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'
    ].reduce((acc, cur, idx) => ({
        ...acc,
        [cur]: idx
    }), {});
    */

    const 종성_연결자 = {
        ''  : 0,  'ㄱ': 1,  'ㄲ': 2,  'ㄳ': 3,
        'ㄴ': 4,  'ㄵ': 5,  'ㄶ': 6,  'ㄷ': 7,
        'ㄹ': 8,  'ㄺ': 9,  'ㄻ': 10, 'ㄼ': 11,
        'ㄽ': 12, 'ㄾ': 13, 'ㄿ': 14, 'ㅀ': 15,
        'ㅁ': 16, 'ㅂ': 17, 'ㅄ': 18, 'ㅅ': 19,
        'ㅆ': 20, 'ㅇ': 21, 'ㅈ': 22, 'ㅊ': 23,
        'ㅋ': 24, 'ㅌ': 25, 'ㅍ': 26, 'ㅎ': 27,
    };

    const 자음_유니코드_시작점 = 12623;
    const 유니코드_한글_시작점 = 44032;
    
    const 초성_인덱스 = 초성_연결자[초성];
    const 중성_인덱스 = 중성_유니코드 - 자음_유니코드_시작점;
    const 종성_인덱스 = 종성_연결자[종성];

    return String.fromCharCode(
        유니코드_한글_시작점
        + 초성_인덱스 * 588
        + 중성_인덱스 * 28
        + 종성_인덱스
    );
}

function shouldBe(func, input, expected) {
    console.log(func, input, expected);
    try {
        const result = func(input);
        if (JSON.stringify(expected) === JSON.stringify(result)) {
            console.log('✅ 예상값과 결과가 같습니다.');
            return true;
        }
        console.log('❌ 예상값과 결과가 다릅니다. =>', result);
        return false;
    } catch(e) {
        console.log('🟡 알 수 없는 에러 발생. =>', e);
        return false;
    }
}

(function test() {
    shouldBe(글자_병합기, ['ㅈ', 'ㅣ', 'ㄴ'], '진');
    shouldBe(글자_병합기, ['ㅂ', 'ㅞ', 'ㄺ'], '뷁');
    shouldBe(글자_병합기, [' '], ' ');
    shouldBe(글자_병합기, ['a'], 'a');
    shouldBe(글자_병합기, ['.'], '.');
})();